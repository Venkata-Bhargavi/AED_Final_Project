/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Hospital;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Krishnakanth Naik Jarapala
 */
public class ManageHospitalUser extends javax.swing.JPanel {

    /**
     * Creates new form ManageHospitalUser
     */
    private Enterprise enterprise;
    JPanel workArea;
    public ManageHospitalUser(Enterprise enterprise,JPanel workArea) {
        initComponents();
        this.workArea = workArea;
        this.enterprise = enterprise;
        popOrganizationComboBox();
        cbO.setSelectedIndex(-1);
        popData();
        
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
        
//        btnUpdate.setEnabled(false);
//        btnDelete.setEnabled(false);
        
    }
    public void popOrganizationComboBox() {
        cbO.removeAllItems();

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            cbO.addItem(organization);
        }
    }
    
    public void populateEmployeeComboBox(Organization organization){
        cbE.removeAllItems();
        
        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()){
            cbE.addItem(employee);
        }
    }
    
    private void populateRoleComboBox(Organization organization){
        cbR.removeAllItems();
        for (Role role : organization.getSupportedRole()){
            cbR.addItem(role);
        }
    }

    public void popData() {

        DefaultTableModel model = (DefaultTableModel) tbl.getModel();

        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount ua : organization.getUserAccountDirectory().getUserAccountList()) {
                Object row[] = new Object[2];
                row[0] = ua;
                row[1] = ua.getRole();
                ((DefaultTableModel) tbl.getModel()).addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbO = new javax.swing.JComboBox();
        cbE = new javax.swing.JComboBox();
        cbR = new javax.swing.JComboBox();
        txtUN = new javax.swing.JTextField();
        txtP = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        lblEP = new javax.swing.JLabel();
        lblEU = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel1.setText("Create User Account");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(283, 40, -1, -1));

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "UserName", "Role"
            }
        ));
        jScrollPane1.setViewportView(tbl);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(84, 127, 620, 100));

        jLabel2.setText("Organization :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, -1, -1));

        jLabel3.setText("Employee :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 310, -1, -1));

        jLabel4.setText("Role :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 350, -1, -1));

        jLabel5.setText("UserName :");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, -1, -1));

        jLabel6.setText("Password :");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, -1, -1));

        cbO.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOActionPerformed(evt);
            }
        });
        add(cbO, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, 159, -1));

        cbE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEActionPerformed(evt);
            }
        });
        add(cbE, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 310, 159, -1));

        cbR.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRActionPerformed(evt);
            }
        });
        add(cbR, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 350, 159, -1));

        txtUN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUNActionPerformed(evt);
            }
        });
        txtUN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUNKeyReleased(evt);
            }
        });
        add(txtUN, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 390, 159, -1));
        add(txtP, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 430, 159, -1));

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 490, -1, -1));
        add(lblEP, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 430, 290, 23));
        add(lblEU, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 390, 290, 23));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 490, 90, -1));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 490, 90, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void txtUNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUNActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        String passwordToHash = String.valueOf(txtP.getText());
        String password_ = null;
        boolean upCase = false;
        boolean loCase = false;
        boolean isDigit = false;
        boolean spChar = false;
        if (!passwordToHash.equals("")) {
            String SPECIAL_CHARACTERS = "!@#$%^&*()~`-=_+[]{}|:\";',./<>?";

            password_ = passwordToHash.trim();
            char[] aC = password_.toCharArray();
            for (char c : aC) {
                if (Character.isUpperCase(c)) {
                    upCase = true;
                } else if (Character.isLowerCase(c)) {
                    loCase = true;
                } else if (Character.isDigit(c)) {
                    isDigit = true;
                } else if (SPECIAL_CHARACTERS.indexOf(String.valueOf(c)) >= 0) {
                    spChar = true;
                }
            }
        }
        
        
        if (txtUN.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter User Name.");
        }
       else if (txtP.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Password.");
        } 
       else if ((password_.length() > 7) || (password_.length() < 3)) {
            JOptionPane.showMessageDialog(null, "Password must have minimum lenght 3 and maximum length 7");
            lblEP.setText("Password must have minimum lenght 3 and maximum length 7");
        } else if (upCase == false) {
            JOptionPane.showMessageDialog(null, "Password must have one Upper case");
            lblEP.setText("Password must have one Upper case");
        } else if (loCase == false) {
            JOptionPane.showMessageDialog(null, "Password must have one Lower case");
            lblEP.setText("Password must have one Lower case");
        } else if (isDigit == false) {
            JOptionPane.showMessageDialog(null, "Password must have one Digit");
            lblEP.setText("Password must have one Digit");
        } else if (spChar == false) {
            JOptionPane.showMessageDialog(null, "Password must have one Special Character");
            lblEP.setText("Password must have one Special Character");
        }
       
       
       else {

            String userName = txtUN.getText();
            String password = txtP.getText();
            Organization organization = (Organization) cbO.getSelectedItem();
            Employee employee = (Employee) cbE.getSelectedItem();
            Role role = (Role) cbR.getSelectedItem();

            organization.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
            txtUN.setText("");
            txtP.setText("");
            popData();
             JOptionPane.showMessageDialog(null, "Account created successfully.", "Warning", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void cbRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRActionPerformed

    private void cbOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOActionPerformed
        // TODO add your handling code here:
        Organization organization = (Organization) cbO.getSelectedItem();
        if(cbO.getSelectedIndex() != -1){
            populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
        }
//        if (organization != null){
//            populateEmployeeComboBox(organization);
//            populateRoleComboBox(organization);
//        }
    }//GEN-LAST:event_cbOActionPerformed

    private void txtUNKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUNKeyReleased
        // TODO add your handling code here:
        
//        Organization organization = (Organization) cbO.getSelectedItem();
//        Employee employee = (Employee) cbE.getSelectedItem();
//        
//        boolean empExist = organization.getUserAccountDirectory().findEmployee(employee);
//        
//        if(empExist){
//            JOptionPane.showMessageDialog(null, "Employee already exists!", "Dialogue", JOptionPane.INFORMATION_MESSAGE);
//            btnCreate.setEnabled(false);
//            btnUpdate.setEnabled(true);
//            btnDelete.setEnabled(true);
//            
//            UserAccount ua = organization.getUserAccountDirectory().fetchEmployeeCredentials(employee);
//            txtUN.setText(ua.getUsername());
//            txtP.setText(ua.getPassword());
//            
////            txtUN.setText("");
//        }
//        else{
//            btnCreate.setEnabled(true);
//        }
    }//GEN-LAST:event_txtUNKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        
        String passwordToHash = String.valueOf(txtP.getText());
        String password_ = null;
        boolean upCase = false;
        boolean loCase = false;
        boolean isDigit = false;
        boolean spChar = false;
        if (!passwordToHash.equals("")) {
            String SPECIAL_CHARACTERS = "!@#$%^&*()~`-=_+[]{}|:\";',./<>?";

            password_ = passwordToHash.trim();
            char[] aC = password_.toCharArray();
            for (char c : aC) {
                if (Character.isUpperCase(c)) {
                    upCase = true;
                } else if (Character.isLowerCase(c)) {
                    loCase = true;
                } else if (Character.isDigit(c)) {
                    isDigit = true;
                } else if (SPECIAL_CHARACTERS.indexOf(String.valueOf(c)) >= 0) {
                    spChar = true;
                }
            }
        }
        
        
        if (txtUN.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter User Name.");
        }
       else if (txtP.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Password.");
        } 
       else if ((password_.length() > 7) || (password_.length() < 3)) {
            JOptionPane.showMessageDialog(null, "Password must have minimum lenght 3 and maximum length 7");
            lblEP.setText("Password must have minimum lenght 3 and maximum length 7");
        } else if (upCase == false) {
            JOptionPane.showMessageDialog(null, "Password must have one Upper case");
            lblEP.setText("Password must have one Upper case");
        } else if (loCase == false) {
            JOptionPane.showMessageDialog(null, "Password must have one Lower case");
            lblEP.setText("Password must have one Lower case");
        } else if (isDigit == false) {
            JOptionPane.showMessageDialog(null, "Password must have one Digit");
            lblEP.setText("Password must have one Digit");
        } else if (spChar == false) {
            JOptionPane.showMessageDialog(null, "Password must have one Special Character");
            lblEP.setText("Password must have one Special Character");
        }
       
       
       else {

            String userName = txtUN.getText();
            String password = txtP.getText();
            Organization organization = (Organization) cbO.getSelectedItem();
            Employee employee = (Employee) cbE.getSelectedItem();
            Role role = (Role) cbR.getSelectedItem();
            
            UserAccount ua = organization.getUserAccountDirectory().fetchEmployeeCredentials(employee);
//            txtUN.setText(ua.getUsername());
//            txtP.setText(ua.getPassword());
            ua.setUsername(userName);
            ua.setPassword(password);
            
//            organization.getUserAccountDirectory().createUserAccount(userName, password, employee, role);
            txtUN.setText("");
            txtP.setText("");
            popData();
            btnCreate.setEnabled(true);
            btnUpdate.setEnabled(false);
            btnDelete.setEnabled(false);

            JOptionPane.showMessageDialog(null, "Account Updated successfully.", "Warning", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        Organization organization = (Organization) cbO.getSelectedItem();
        Employee employee = (Employee) cbE.getSelectedItem();
        Role role = (Role) cbR.getSelectedItem();
        
        
        boolean x  = organization.getEmployeeDirectory().deleteEmployee(employee);
        
        if(x){
            boolean y = organization.getUserAccountDirectory().deleteEmployeeCredentials(employee);
            txtUN.setText("");
            txtP.setText("");
            popData();
            btnCreate.setEnabled(true);
            btnUpdate.setEnabled(false);
            btnDelete.setEnabled(false);
            JOptionPane.showMessageDialog(null, "Account Deleted successfully.", "Warning", JOptionPane.INFORMATION_MESSAGE);
//            popOrganizationComboBox();
//            cbO.setSelectedIndex(-1);

            populateEmployeeComboBox(organization);
            populateRoleComboBox(organization);
            popData();
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cbEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEActionPerformed
        // TODO add your handling code here:
        
        Organization organization = (Organization) cbO.getSelectedItem();
        Employee employee = (Employee) cbE.getSelectedItem();
        
        boolean empExist = organization.getUserAccountDirectory().findEmployee(employee);
        
        if(empExist){
//            JOptionPane.showMessageDialog(null, "Employee already exists!", "Dialogue", JOptionPane.INFORMATION_MESSAGE);
            btnCreate.setEnabled(false);
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            
            UserAccount ua = organization.getUserAccountDirectory().fetchEmployeeCredentials(employee);
            txtUN.setText(ua.getUsername());
            txtP.setText(ua.getPassword());
            
//            txtUN.setText("");
        }
        else{
            btnCreate.setEnabled(true);
        }
    }//GEN-LAST:event_cbEActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cbE;
    private javax.swing.JComboBox cbO;
    private javax.swing.JComboBox cbR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEP;
    private javax.swing.JLabel lblEU;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtP;
    private javax.swing.JTextField txtUN;
    // End of variables declaration//GEN-END:variables
}
